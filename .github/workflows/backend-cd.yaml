name: Backend CD
'on':
  workflow_dispatch: null
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: 0 5 * * 1-5
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: pip install pipenv
      - name: Install project dependencies
        working-directory: starter/backend
        run: pipenv install --dev
      - name: Run linting
        working-directory: starter/backend
        run: pipenv run lint
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: pip install pipenv
      - name: Install project dependencies
        working-directory: starter/backend
        run: pipenv install --dev
      - name: Run tests
        working-directory: starter/backend
        run: pipenv run test
  build:
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: '${{ secrets.AWS_REGION }}'
      - name: Create ECR repository if not exists
        id: create_ecr_repo
        run: >
          aws ecr describe-repositories --repository-names mp-frontend || aws
          ecr create-repository --repository-name mp-frontend
      - name: Log in to Amazon ECR
        id: ecr-login
        run: >
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker
          login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID
          }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      - name: Build Docker image
        run: >-
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{
          secrets.AWS_REGION }}.amazonaws.com/mp-backend:latest .
        - name: Build Docker image
        working-directory: starter/backend
        run: >-
          docker build --tag mp-backend:latest .
      - name: List Docker images
        run: docker images
      - name: Tag Docker image for ECR
        run: >-
          docker tag mp-frontend:latest ${{ secrets.AWS_ACCOUNT_ID
          }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/mp-frontend:latest
      - name: Push Docker image to ECR
        run: >-
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{
          secrets.AWS_REGION }}.amazonaws.com/mp-backend:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: latest
      - name: Update kubeconfig
        run: >-
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}
          --region ${{ secrets.AWS_REGION }}
      - name: Deploy to EKS
        run: >
          kubectl set image deployment/backend backend=${{
          secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION
          }}.amazonaws.com/mp-backend:latest

          kubectl rollout status deployment/backend
